{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { phoneStyles } from \"../styles/element/phoneInStyles\";\nimport { url } from \"../const/url\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Phones = function (_Component) {\n  _inherits(Phones, _Component);\n\n  var _super = _createSuper(Phones);\n\n  function Phones() {\n    var _this;\n\n    _classCallCheck(this, Phones);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      data: []\n    };\n\n    _this.fetchData = function _callee() {\n      var response, phones;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(url + '/phoneTypes'));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 5:\n              phones = _context.sent;\n\n              _this.setState({\n                data: phones\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(Phones, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsx(View, {\n        style: phoneStyles.div,\n        children: _jsx(FlatList, {\n          data: this.state.data,\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          },\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsx(View, {\n              style: phoneStyles.rows,\n              children: _jsxs(Text, {\n                style: phoneStyles.data,\n                children: [item.brand_name.toUpperCase(), \" \", item.model_name.toUpperCase()]\n              })\n            });\n          }\n        })\n      });\n    }\n  }]);\n\n  return Phones;\n}(Component);\n\nexport { Phones as default };","map":{"version":3,"sources":["C:/szakdolgozat/legujabb/app/StorageApplication/element/PhonesIn.js"],"names":["React","Component","phoneStyles","url","Phones","state","data","fetchData","fetch","response","json","phones","setState","div","item","index","toString","rows","brand_name","toUpperCase","model_name"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;AAEA,SAASC,WAAT;AACA,SAASC,GAAT;;;;IAEqBC,M;;;;;;;;;;;;;;;UACnBC,K,GAAO;AACLC,MAAAA,IAAI,EAAC;AADA,K;;UAIPC,S,GAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACcC,KAAK,CAACL,GAAG,GAAC,aAAL,CADnB;;AAAA;AACHM,cAAAA,QADG;AAAA;AAAA,+CAEYA,QAAQ,CAACC,IAAT,EAFZ;;AAAA;AAEHC,cAAAA,MAFG;;AAGT,oBAAKC,QAAL,CAAc;AAACN,gBAAAA,IAAI,EAAEK;AAAP,eAAd;;AAHS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;WAKX,6BAAmB;AAAC,WAAKJ,SAAL;AAAkB;;;WAEtC,kBAAS;AACP,aACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,WAAW,CAACW,GAAzB;AAAA,kBACE,KAAC,QAAD;AACE,UAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,IADnB;AAEE,UAAA,YAAY,EAAE,sBAACQ,IAAD,EAAMC,KAAN;AAAA,mBAAgBA,KAAK,CAACC,QAAN,EAAhB;AAAA,WAFhB;AAGE,UAAA,UAAU,EAAE;AAAA,gBAAEF,IAAF,QAAEA,IAAF;AAAA,mBACV,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEZ,WAAW,CAACe,IAAzB;AAAA,wBACE,MAAC,IAAD;AAAM,gBAAA,KAAK,EAAEf,WAAW,CAACI,IAAzB;AAAA,2BAAiCQ,IAAI,CAACI,UAAN,CAAkBC,WAAlB,EAAhC,OAAmEL,IAAI,CAACM,UAAN,CAAkBD,WAAlB,EAAlE;AAAA;AADF,cADU;AAAA;AAHd;AADF,QADF;AAaD;;;;EA1BiClB,S;;SAAfG,M","sourcesContent":["import React, {Component} from 'react';\r\nimport {Text, View,FlatList} from 'react-native';\r\nimport { phoneStyles } from '../styles/element/phoneInStyles';\r\nimport { url } from '../const/url';\r\n\r\nexport default class Phones extends Component {\r\n  state ={\r\n    data:[]\r\n  }\r\n\r\n  fetchData= async()=>{\r\n    const response = await fetch(url+'/phoneTypes');\r\n    const phones = await response.json();\r\n    this.setState({data: phones});\r\n  }\r\n  componentDidMount(){this.fetchData();}\r\n  \r\n  render() {\r\n    return (\r\n      <View style={phoneStyles.div}>\r\n        <FlatList\r\n          data={this.state.data}\r\n          keyExtractor={(item,index) => index.toString()}\r\n          renderItem={({item}) =>\r\n            <View style={phoneStyles.rows}>\r\n              <Text style={phoneStyles.data}>{(item.brand_name).toUpperCase()} {(item.model_name).toUpperCase()}</Text>\r\n            </View>\r\n          }  \r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}