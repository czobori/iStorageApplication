{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport { View } from \"../components/Themed\";\nimport { useForm } from 'react-hook-form';\nimport { containerStyles } from \"../styles/element/containerStyle\";\nimport UserInput from \"../components/input/userInputComp\";\nimport LoginButton from \"../components/button/loginButtonComp\";\nimport LoginText from \"../components/texts/LoginTextsComp\";\nimport GradientBack from \"../components/linegradient/linegradent\";\nimport { Base64 } from 'js-base64';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  function getAllUserName() {\n    var response, users;\n    return _regeneratorRuntime.async(function getAllUserName$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:4550/user'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            users = _context.sent;\n            return _context.abrupt(\"return\", users.username);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors,\n      watch = _useForm.watch;\n\n  var onLoginPressed = function onLoginPressed(data) {\n    var username = watch('username');\n    var originPwd = watch('password');\n    var inDatabasePwd = \"\";\n    var secretingPwd = Base64.decode(inDatabasePwd);\n    var allName = getAllUserName();\n    console.log(allName);\n  };\n\n  return _jsxs(View, {\n    style: containerStyles.container,\n    children: [_jsx(GradientBack, {}), _jsx(LoginText, {}), _jsx(UserInput, {\n      name: \"username\",\n      placeholder: \"felhaszn\\xE1l\\xF3n\\xE9v\",\n      control: control,\n      rules: {\n        required: 'Felhasználónév megadása kötelező!'\n      },\n      secureTextEntry: false\n    }), _jsx(UserInput, {\n      name: \"password\",\n      placeholder: \"jelsz\\xF3\",\n      control: control,\n      rules: {\n        required: 'Jelszó megadása kötelező!'\n      },\n      secureTextEntry: true\n    }), _jsx(LoginButton, {\n      onPress: handleSubmit(onLoginPressed)\n    })]\n  });\n}","map":{"version":3,"sources":["C:/szakdolgozat/uj/StorageApplication/screens/LoginScreen.tsx"],"names":["React","View","useForm","containerStyles","UserInput","LoginButton","LoginText","GradientBack","Base64","LoginScreen","navigation","getAllUserName","fetch","response","json","users","username","control","handleSubmit","errors","formState","watch","onLoginPressed","data","originPwd","inDatabasePwd","secretingPwd","decode","allName","console","log","container","required"],"mappings":";AAAA,OAAOA,KAAP,MAA8B,OAA9B;AACA,SAAQC,IAAR;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AAEA,SAAQC,eAAR;AACA,OAAOC,SAAP;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;AACA,SAASC,MAAT,QAAuB,WAAvB;;;AAIA,eAAe,SAASC,WAAT,OAAwE;AAAA,MAAjDC,UAAiD,QAAjDA,UAAiD;;AACrF,WAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACyBC,KAAK,CAAC,4BAAD,CAD9B;;AAAA;AACQC,YAAAA,QADR;AAAA;AAAA,6CAEsBA,QAAQ,CAACC,IAAT,EAFtB;;AAAA;AAEQC,YAAAA,KAFR;AAAA,6CAGSA,KAAK,CAACC,QAHf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,iBAA0Dd,OAAO,EAAjE;AAAA,MAAOe,OAAP,YAAOA,OAAP;AAAA,MAAeC,YAAf,YAAeA,YAAf;AAAA,MAAyCC,MAAzC,YAA6BC,SAA7B,CAAyCD,MAAzC;AAAA,MAAiDE,KAAjD,YAAiDA,KAAjD;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAc;AACnC,QAAMP,QAAQ,GAAGK,KAAK,CAAC,UAAD,CAAtB;AACA,QAAMG,SAAS,GAAGH,KAAK,CAAC,UAAD,CAAvB;AACA,QAAMI,aAAa,GAAG,EAAtB;AACA,QAAMC,YAAY,GAAGlB,MAAM,CAACmB,MAAP,CAAcF,aAAd,CAArB;AAEA,QAAMG,OAAO,GAAGjB,cAAc,EAA9B;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD,GARD;;AAUA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEzB,eAAe,CAAC4B,SAA7B;AAAA,eACE,KAAC,YAAD,KADF,EAEE,KAAC,SAAD,KAFF,EAGE,KAAC,SAAD;AAAW,MAAA,IAAI,EAAC,UAAhB;AAA2B,MAAA,WAAW,EAAC,yBAAvC;AACE,MAAA,OAAO,EAAEd,OADX;AACoB,MAAA,KAAK,EAAE;AAACe,QAAAA,QAAQ,EAAC;AAAV,OAD3B;AAC2E,MAAA,eAAe,EAAE;AAD5F,MAHF,EAKE,KAAC,SAAD;AAAW,MAAA,IAAI,EAAC,UAAhB;AAA2B,MAAA,WAAW,EAAC,WAAvC;AAAgD,MAAA,OAAO,EAAEf,OAAzD;AACE,MAAA,KAAK,EAAE;AAACe,QAAAA,QAAQ,EAAC;AAAV,OADT;AACiD,MAAA,eAAe,EAAE;AADlE,MALF,EAOE,KAAC,WAAD;AAAa,MAAA,OAAO,EAAEd,YAAY,CAACI,cAAD;AAAlC,MAPF;AAAA,IADF;AAWD","sourcesContent":["import React, {useState} from 'react';\r\nimport {View} from '../components/Themed';\r\nimport {useForm} from 'react-hook-form'\r\nimport {RootTabScreenProps} from '../types';\r\nimport {containerStyles} from '../styles/element/containerStyle';\r\nimport UserInput from '../components/input/userInputComp';\r\nimport LoginButton from '../components/button/loginButtonComp';\r\nimport LoginText from '../components/texts/LoginTextsComp';\r\nimport GradientBack from '../components/linegradient/linegradent';\r\nimport { Base64 } from 'js-base64';\r\n\r\n\r\n\r\nexport default function LoginScreen({ navigation }: RootTabScreenProps<'LoginScreen'>) {\r\n  async function getAllUserName() {\r\n    const response = await fetch('http://localhost:4550/user');\r\n    const users = await response.json();\r\n    return users.username;\r\n  }\r\n  const {control,handleSubmit, formState: {errors},watch} = useForm();\r\n  const onLoginPressed = (data: any) =>{\r\n    const username = watch('username');\r\n    const originPwd = watch('password');\r\n    const inDatabasePwd = \"\";\r\n    const secretingPwd = Base64.decode(inDatabasePwd);\r\n    //navigation.navigate(\"HomeScreen\");\r\n    const allName = getAllUserName();\r\n    console.log(allName);\r\n  };\r\n\r\n  return (\r\n    <View style={containerStyles.container}>\r\n      <GradientBack/>\r\n      <LoginText/>\r\n      <UserInput name=\"username\" placeholder=\"felhasználónév\" \r\n        control={control} rules={{required:'Felhasználónév megadása kötelező!'}} secureTextEntry={false} />\r\n      <UserInput name=\"password\" placeholder=\"jelszó\" control={control} \r\n        rules={{required:'Jelszó megadása kötelező!'}} secureTextEntry={true}/>\r\n      <LoginButton onPress={handleSubmit(onLoginPressed)}/>\r\n    </View>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}