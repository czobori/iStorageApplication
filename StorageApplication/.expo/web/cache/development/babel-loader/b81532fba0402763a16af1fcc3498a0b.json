{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport * as Progress from 'react-native-progress';\nimport { warehousefullStyle } from \"../styles/element/progressbarStyle\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar WarehouseSaturation = function (_Component) {\n  _inherits(WarehouseSaturation, _Component);\n\n  var _super = _createSuper(WarehouseSaturation);\n\n  function WarehouseSaturation() {\n    var _this;\n\n    _classCallCheck(this, WarehouseSaturation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      szam: 0\n    };\n\n    _this.fetchData = function _callee() {\n      var currently;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = _regeneratorRuntime;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:4550/currentlyInStock'));\n\n            case 3:\n              _context.t1 = _context.sent.json();\n              _context.next = 6;\n              return _context.t0.awrap.call(_context.t0, _context.t1);\n\n            case 6:\n              currently = _context.sent;\n\n              _this.setState({\n                szam: currently.number / 5000\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(WarehouseSaturation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var szazalekkerekitve = Math.round(this.state.szam * 100 * 100) / 100;\n      return _jsxs(View, {\n        style: warehousefullStyle.div,\n        children: [_jsxs(Text, {\n          style: warehousefullStyle.text,\n          children: [\"Rakt\\xE1r telts\\xE9ge: \", this.state.szam * 100, \"%\"]\n        }), _jsxs(Text, {\n          style: warehousefullStyle.text,\n          children: [\"Rakt\\xE1r telts\\xE9ge: \", szazalekkerekitve, \"%\"]\n        }), _jsx(Progress.Bar, {\n          progress: this.state.szam,\n          width: Dimensions.get('window').width - 100,\n          style: warehousefullStyle.bar\n        })]\n      });\n    }\n  }]);\n\n  return WarehouseSaturation;\n}(Component);\n\nexport { WarehouseSaturation as default };","map":{"version":3,"sources":["C:/szakdolgozat/uj/StorageApplication/element/WarehouseFull.js"],"names":["React","Component","Progress","warehousefullStyle","WarehouseSaturation","state","szam","fetchData","fetch","json","currently","setState","number","szazalekkerekitve","Math","round","div","text","Dimensions","get","width","bar"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;AAEA,OAAO,KAAKC,QAAZ,MAA0B,uBAA1B;AACA,SAASC,kBAAT;;;;IACqBC,mB;;;;;;;;;;;;;;;UACjBC,K,GAAO;AACHC,MAAAA,IAAI,EAAC;AADF,K;;UAIPC,S,GAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBC,KAAK,CAAE,wCAAF,CAD7B;;AAAA;AAAA,0CAC0EC,IAD1E;AAAA;AAAA;;AAAA;AACDC,cAAAA,SADC;;AAEP,oBAAKC,QAAL,CAAc;AAACL,gBAAAA,IAAI,EAACI,SAAS,CAACE,MAAV,GAAiB;AAAvB,eAAd;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;WAIX,6BAAmB;AACf,WAAKL,SAAL;AACH;;;WAED,kBAAQ;AACJ,UAAMM,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAY,KAAKV,KAAL,CAAWC,IAAX,GAAgB,GAAjB,GAAsB,GAAjC,IAAsC,GAAhE;AACA,aACI,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,kBAAkB,CAACa,GAAhC;AAAA,mBACI,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEb,kBAAkB,CAACc,IAAhC;AAAA,gDAAwD,KAAKZ,KAAL,CAAWC,IAAX,GAAgB,GAAxE;AAAA,UADJ,EAEI,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEH,kBAAkB,CAACc,IAAhC;AAAA,gDAAwDJ,iBAAxD;AAAA,UAFJ,EAGI,KAAC,QAAD,CAAU,GAAV;AAAc,UAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWC,IAAnC;AAAyC,UAAA,KAAK,EAAEY,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiC,GAAjF;AAAsF,UAAA,KAAK,EAAEjB,kBAAkB,CAACkB;AAAhH,UAHJ;AAAA,QADJ;AAOH;;;;EAtB4CpB,S;;SAA5BG,mB","sourcesContent":["import React, {Component} from 'react';\r\nimport {Text, View,Dimensions} from 'react-native';\r\nimport * as Progress from 'react-native-progress';\r\nimport { warehousefullStyle } from '../styles/element/progressbarStyle';\r\nexport default class WarehouseSaturation extends Component{\r\n    state ={\r\n        szam:0,\r\n    }\r\n    \r\n    fetchData= async()=>{\r\n        const currently = await (await fetch ('http://localhost:4550/currentlyInStock')).json();\r\n        this.setState({szam:currently.number/5000});\r\n    }\r\n    componentDidMount(){\r\n        this.fetchData();\r\n    }\r\n    \r\n    render(){\r\n        const szazalekkerekitve = Math.round((this.state.szam*100)*100)/100;\r\n        return(\r\n            <View style={warehousefullStyle.div}>\r\n                <Text style={warehousefullStyle.text}>Raktár teltsége: {this.state.szam*100}%</Text>\r\n                <Text style={warehousefullStyle.text}>Raktár teltsége: {szazalekkerekitve}%</Text>\r\n                <Progress.Bar progress={this.state.szam} width={Dimensions.get('window').width - 100} style={warehousefullStyle.bar} />\r\n            </View>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}